/******************************************************************************/
/*                                                                            */
/*  AN_COHERENCE - Coherence analysis and plot of values                      */
/*                                                                            */
/******************************************************************************/

class AnalyzeCoherenceChild {

public:
   AnalyzeCoherenceChild ( int npreds , int *preds , int n_dim , int nonpar ) ;
   ~AnalyzeCoherenceChild () ;

   int lookback ;
   int npred ;
   int preds[MAX_VARS] ;
   int nonpar ;
   int n ;        // Length of displayed series of coherences
   double *val ;  // Coherences for display
   // Work areas
   double *mean ;
   double *covar ;
} ;


/*
--------------------------------------------------------------------------------

   Constructor and Destructor

--------------------------------------------------------------------------------
*/

AnalyzeCoherenceChild::AnalyzeCoherenceChild ( int np , int *p , int lb , int nonp )
{
   int icase, i, j, k ;
   double *dptr, *means, *evals, *evects, *workv, minval, maxval, meanval ;
   double sum, total, diff, diff2, *nonpar_work, factor ;
   char msg[512], line[1024] ;
   FILE *fp ;

   MEMTEXT ( "AN_COHERENCE AnalyzeCoherenceChild constructor" ) ;
   npred = np ;
   lookback = lb ;
   nonpar = nonp ;
   for (i=0 ; i<np ; i++)
      preds[i] = p[i] ;

   audit ( "" ) ;
   audit ( "" ) ;
   audit ( "******************************************" ) ;
   audit ( "*  Beginning coherence analysis...       *" ) ;
   if (nonpar)
      audit ( "*     Nonparametric correlation          *" ) ;
   else
      audit ( "*     Ordinary correlation               *" ) ;
   audit ( "******************************************" ) ;

   audit ( "" ) ;
   sprintf_s ( msg, "The following variables are tested with a lookback of %d:", lookback ) ;
   audit ( msg ) ;
   for ( i=0 ; i<npred ; i++) {
      sprintf_s ( msg , "   %s", var_names[preds[i]] ) ;
      audit ( msg ) ;
      }


/*
   Allocate memory
*/

   MEMTEXT ( "AN_COHERENCE: val, means, covar, evals, evects, workv" ) ;
   val = (double *) malloc ( (n_cases-lookback+1) * sizeof(double) ) ;
   means = (double *) malloc ( npred * sizeof(double) ) ;
   covar = (double *) malloc ( npred * npred * sizeof(double) ) ;
   evals = (double *) malloc ( npred * sizeof(double) ) ;
   evects = (double *) malloc ( npred * npred * sizeof(double) ) ;
   workv = (double *) malloc ( npred * sizeof(double) ) ;
   if (nonpar) {
      MEMTEXT ( "AN_COHERENCE: nonpar_work" ) ;
      nonpar_work = (double *) malloc ( 2 * lookback * sizeof(double) ) ;  // Used for nonpar corr
      }
   else
      nonpar_work = NULL ;


/*
   Main outer loop does all cases
*/

   minval = 1.e30 ;
   maxval = -1.e30 ;
   meanval = 0.0 ;

   for (icase=lookback-1 ; icase<n_cases ; icase++) {

      // If nonparametric, compute correlation matrix

      if (nonpar) {
         covar[0] = 1.0 ;
         for (i=1 ; i<npred ; i++) {
            for (j=0 ; j<i ; j++) {
               for (k=0 ; k<lookback ; k++) {
                  dptr = database + n_vars * (icase - k) ;  // Point to this case in database
                  nonpar_work[k] = dptr[preds[i]] ;
                  nonpar_work[lookback+k] = dptr[preds[j]] ;
                  }
               covar[i*npred+j] = spearman ( lookback , nonpar_work , nonpar_work+lookback , nonpar_work , nonpar_work+lookback ) ;
               }
            covar[i*npred+i] = 1.0 ;
            }
         }

      // Else not nonparametric, so compute means and covariances, then correlation

      else {
         for (i=0 ; i<npred ; i++)
            means[i] = 0.0 ;

         for (i=0 ; i<lookback ; i++) {
            dptr = database + n_vars * (icase - i) ;  // Point to this case in database
            for (j=0 ; j<npred ; j++)
               means[j] += dptr[preds[j]] ;
            }

         for (j=0 ; j<npred ; j++)
            means[j] /= lookback ;

         for (i=0 ; i<npred ; i++) {
            for (j=0 ; j<=i ; j++)
               covar[i*npred+j] = 0.0 ;
            }

         for (i=0 ; i<lookback ; i++) {
            dptr = database + n_vars * (icase - i) ;  // Point to this case in database
            for (j=0 ; j<npred ; j++) {
               diff = dptr[preds[j]] - means[j] ;
               for (k=0 ; k<=j ; k++) {
                  diff2 = dptr[preds[k]] - means[k] ;
                  covar[j*npred+k] += diff * diff2 ;
                  }
               }
            }

         for (j=0 ; j<npred ; j++) {
            for (k=0 ; k<=j ; k++)
               covar[j*npred+k] /= lookback ;
            }

         // Convert covariances to correlation
         for (j=1 ; j<npred ; j++) {
            for (k=0 ; k<j ; k++)
               covar[j*npred+k] /= sqrt ( covar[j*npred+j] * covar[k*npred+k] ) ;
            }

         for (j=0 ; j<npred ; j++)
            covar[j*npred+j] = 1.0 ;
            
         } // Else not nonpar, so compute means and covar, correlation

/*
   Compute eigenvalues and fill in 'val' which we will display
*/

      evec_rs ( covar , npred , 0 , evects , evals , workv ) ;

      factor = 0.5 * (npred - 1) ;
      sum = total = 0.0 ;
      for (i=0 ; i<npred ; i++) {
         total += evals[i] ;
         sum += (factor - i) * evals[i] / factor ;
         }

      // Compute the criterion
      sum /= total ;
      val[icase-lookback+1] = sum ;

      if (val[icase-lookback+1] > maxval)
         maxval = val[icase-lookback+1] ;
      if (val[icase-lookback+1] < minval)
         minval = val[icase-lookback+1] ;
      meanval += val[icase-lookback+1] ;

      } // For all cases

   meanval /= n_cases - lookback + 1 ;


/*
   Print summary
*/

   audit ( "" ) ;
   sprintf_s ( msg, "Mean coherence = %.5lf", meanval ) ;
   audit ( msg ) ;
   sprintf_s ( msg, "Min = %.5lf", minval ) ;
   audit ( msg ) ;
   sprintf_s ( msg, "Max = %.5lf", maxval ) ;
   audit ( msg ) ;
   audit ( "" ) ;
   sprintf_s ( msg, "Coherence values have been written to %s", coherence_log ) ;
   audit ( msg ) ;

   MEMTEXT ( "AN_COHERENCE: free means, covar, evals, evects, workv (,nonpar_work)" ) ;
   free ( means ) ;
   free ( covar ) ;
   free ( evals ) ;
   free ( evects ) ;
   free ( workv ) ;
   if (nonpar_work != NULL)
      free ( nonpar_work ) ;
}

AnalyzeCoherenceChild::~AnalyzeCoherenceChild ()
{
   MEMTEXT ( "AN_COHERENCE.CPP AnalyzeCoherenceChild destructor" ) ;
   if (val != NULL)
      free ( val ) ;
}
